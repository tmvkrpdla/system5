package manager.co.kr;

import java.io.PrintWriter;
import java.text.DateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import manager.co.kr.util.Api;
import manager.co.kr.util.FileUtil;
import manager.co.kr.util.SessionUtil;


/**
 * Handles requests for the application home page.
 */
@Controller
public class HomeController {
	
	private static final Logger logger = LoggerFactory.getLogger(HomeController.class);
	private static final boolean devMode = false;
	
	@RequestMapping(value = "/")
	public String indexLogin(HttpSession session, Model model) throws Exception {
		
		String moveUrl = "index";
		if(!SessionUtil.isNull(session, "ADMIN")) {
			 
			moveUrl = "redirect:main/home";
		}		
		
		return moveUrl;
	}
	
	@RequestMapping(value ="/main/home")
	public String mainHome(HttpSession session, 
			@RequestParam(value="mainMenu", defaultValue="main") String mainMenu,
			@RequestParam(value="subMenu", defaultValue="home") String subMenu,
			Model model) throws Exception{
		
		String moveUrl = "redirect:/";
		
		if(!SessionUtil.isNull(session, "ADMIN")) {
			
			//	현장 사진 조회 - 공사목록 	[SELECT 목록]
			HashMap resultProjectCountMap =  Api.getProjectCount("");
			int project_count = (Integer) resultProjectCountMap.get("project_count");
			
			HashMap resultProjectMap = Api.getProjectListForPaging("", 1, project_count);
			List project_list = (List) resultProjectMap.get("project_list"); 
			
			
			//	현장 사진 조회 - 보고서 종류	[모니터링 MMS 종류 ( 현장 사진 조회 : 보고서 종류)]
			HashMap<String, Object> resultMmsTypeMap = Api.getMmsTypeList();
			List mms_type_list =(List) resultMmsTypeMap.get("mms_type_list");
			
			
			//	공지사항 목록
		//	HashMap resultNoticeListMap = Api.getNoticeListForPaging(1, 5);
			//List noticeList = (List) resultNoticeListMap.get("notice_list");
			
			//moveUrl ="main/home";
			moveUrl ="main/mainHome";
			
			model.addAttribute("mainMenu", mainMenu);
			model.addAttribute("subMenu", subMenu);
			
			model.addAttribute("PROJECT_LIST", project_list);	//	현장 사진 조회 - 공사 목록 , 공사목록 5개
			model.addAttribute("MMS_TYPE_LIST", mms_type_list);
			
			//model.addAttribute("NOTICE_LIST", noticeList);		//	공지사항 목록
			
		}
		
		return moveUrl;
	}//
	
	@RequestMapping(value="/login/login")
	public String login(HttpSession session,
			@RequestParam HashMap<String, String> paramMap, RedirectAttributes rttr, Model model)throws Exception{
		
		String moveUrl = "";
		
		String Id = paramMap.get("userId");
		String Password = paramMap.get("userPwd");
		
		HashMap<String, Object> loginCheckMap = Api.checkAdminLogin(Id, Password);
		
		String seq_admin = String.valueOf(loginCheckMap.get("seq_admin"));
		//logger.info("seq_admin = " + seq_admin);
		
		if("0".equals(seq_admin)) {
			//	seq_admin	==	0 이면 로그인 실패
			logger.info("= = = = = LOGIN FAIL LOG START = = = = =");
			
			logger.info("login proc paramMap : " + paramMap.toString());
			logger.info("login check return value : " + loginCheckMap.toString());
			logger.info("= = = = = LOGIN FAIL LOG END = = = = =");
			
			rttr.addFlashAttribute("ISLOGIN","FAIL");
			moveUrl = "redirect:../";
			 
		}else {
			
				/*
			  	"seq_admin": 2,
			    "admin_id": "gildongHong",
			    "admin_name": "홍길동",
			    "admin_rank": "과장",
			    "admin_phone": "01000000000",
			    "admin_mail": "gook@aa.net",
			    "time_created": "2020-05-05 15:33:21",
			    "time_modified": "2020-05-05 15:33:25",
			    "time_last_login": "2020-05-19 13:38:44"
			    */
			HashMap<String, Object> adminInfoMap = Api.getAdminInfo(seq_admin);
			
			adminInfoMap.put("userPwd", Password);
			adminInfoMap.put("userId", Id);
									
			session.setAttribute("ADMIN", adminInfoMap);
			session.setMaxInactiveInterval(-1);
			
			logger.info("= = = = = LOGIN SUCCESS LOG START = = = = =");
			logger.info("ADMIN INFO : " + adminInfoMap.toString());
			logger.info("= = = = = LOGIN SUCCESS LOG END = = = = =");
			
			moveUrl = "redirect:../main/home";
			//moveUrl = "redirect:../site/photoList";
			
		}
		
		return moveUrl;
	}
	
	@RequestMapping(value="/login/logout")
	public String logout(HttpSession session)throws Exception{
		String moveUrl = "";
		
		session.invalidate();
		
		moveUrl = "redirect:../";
		return moveUrl;
	}
	
	@RequestMapping(value="/file/uploadError", method=RequestMethod.POST)
	public void uploadError(HttpServletRequest request, HttpServletResponse response, HttpSession session, 
			@RequestParam HashMap paramMap) throws Exception{
		
		
		logger.info("= = = = = FILE UPLOAD ERROR LOG START = = = = =");
		logger.info("uploadError admin_id : " + SessionUtil.getString(session, "ADMIN", "admin_id") );
		logger.info("uploadError admin_name : " + SessionUtil.getString(session, "ADMIN", "admin_name") );
		
		logger.info("uploadError param : " + paramMap.toString());
		logger.info("= = = = = FILE UPLOAD ERROR LOG END = = = = =");
		
	}
	
	@ResponseBody
	@RequestMapping(value="/file/uploadAjax", method=RequestMethod.POST)
	public ResponseEntity<HashMap<String, Object>> uploadAjax(@RequestParam MultipartFile file) throws Exception{
		ResponseEntity<HashMap<String, Object>> returnEntity = null;
		
		//logger.info("data : " + file.getSize());
		//logger.info("data : " + file.getOriginalFilename());
		
		String basePath = "D:/kepco_safety/file";
		String baseTempPath = "D:/tempPath/kepco_safety/file";
		
		logger.info("= = = = = FILE UPLOAD LOG START = = = = =");
		
		Map<String, Object> fileInfoMap = FileUtil.fileUpload(file, basePath, baseTempPath);
		logger.info("uploadAjax result : " + fileInfoMap.toString());
		
		logger.info("= = = = = FILE UPLOAD LOG END = = = = =");
		
		HashMap<String, Object> returnMap = new HashMap<String, Object>();
		returnMap.put("result", fileInfoMap);
		
		returnEntity = new ResponseEntity<HashMap<String, Object>> (returnMap, HttpStatus.OK); 
		
		return returnEntity; 
	}
	
	/**
	 * 이미지 업로드 처리하는 함수
	 * @param request
	 * @param multiFile
	 * @param upload
	 * @throws Exception
	 */
	@RequestMapping(value="/file/imageUpload", method=RequestMethod.POST)
	public void imageUpload(HttpServletRequest request, HttpServletResponse response, HttpSession session, 
			@RequestParam MultipartFile upload) throws Exception{

	    PrintWriter printWriter = null;
	    response.setCharacterEncoding("utf-8");
	    response.setContentType("text/html;charset=utf-8");
	      
	    //	원본 파일명
	    String oriFileName = upload.getOriginalFilename();		
	        
	    
	    //	이미지의 확장자를 가지고 있는지 체크
	    boolean isImage = FileUtil.isImage(oriFileName);
	   
	    
	    try {
	    	printWriter = response.getWriter();
	    	
	    	 //	이미지가 아니면 ...
		    if(!isImage) {
		    	
		    	logger.info("= = = = = IMAGE UPLOAD LOG START = = = = =");
		    	logger.info("imageUpload admin_id : " + SessionUtil.getString(session, "ADMIN", "admin_id") );
				logger.info("imageUpload admin_name : " + SessionUtil.getString(session, "ADMIN", "admin_name") );
				
		    	logger.info("not image : " + oriFileName);
		    	logger.info("= = = = = IMAGE UPLOAD LOG END = = = = =");
		    	
		    	printWriter.print("0"+"|"+ oriFileName + " 는 이미지 파일이 아닙니다.");
		     
		    
		        
		    }else {
		    	
		    	
		    	//	용량확인
		    	long maxSize = 10485760;
		    	if(upload.getSize()>maxSize) {
		    		printWriter.print("0"+"|"+ "10MB 파일 미만으로 올려주시기 바랍니다.");
 
			        

		    	}else {
		    		//	파일 업로드 공통 패스
		    		//String basePath = "D:/kepco_safety/image";
		    		String basePath = "C:/enernet/kepco_safety_web_image";
				    //	임시 저장 패스
				    //String baseTempPath = "D:/tempPath/kepco_safety/image";
		    		String baseTempPath = "C:/enernet/kepco_safety_web_image_temp";
				    
				    //	베이스 URL	(dev)
				    String baseFileUrl = null;
				   
				    
				    if(devMode) {
				    	//	개발자 컴퓨터
				    	baseFileUrl = "http://192.168.100.111:15000/safety/image";
				    	
				    }else {
					    //	운영 서버		
				    	
				    	//baseFileUrl = "https://www.egservice.co.kr/safety/image";
				    	baseFileUrl ="https://www.kepcosafety.co.kr/image";
				    }
				    
				    logger.info("= = = = = IMAGE UPLOAD LOG START = = = = =");
				    logger.info("imageUpload admin_id : " + SessionUtil.getString(session, "ADMIN", "admin_id") );
					logger.info("imageUpload admin_name : " + SessionUtil.getString(session, "ADMIN", "admin_name") );
					
				    Map<String, Object> fileInfoMap = FileUtil.fileUpload(upload, basePath, baseTempPath);
				    String datePath = (String) fileInfoMap.get("datePath");			    
				    String fileName = (String) fileInfoMap.get("fileName");
				    
			    	logger.info("imageUpload imageName : " + oriFileName);
					
				    logger.info("imageUpload fileInfo : " + fileInfoMap.toString());
				    logger.info("= = = = = IMAGE UPLOAD LOG END = = = = =");
				    
				    String url = baseFileUrl +"/" + datePath + "/" + fileName;
				       
				    //logger.info(url); 
				    //	| 구분자로 하여금 전달
				    //	성공 1, message , url
				    printWriter.print("1"+"|"+"이미지를 등록하였습니다." + "|" + url);
				   
				    
		    	}
		    }
		    
		    printWriter.flush();
		    
	    }catch(Exception e) {
	    	e.printStackTrace();
	    	
	    }finally {
	        if (printWriter != null) {
                printWriter.close();
            }
	    }
		    
    }//	end
	
	@RequestMapping(value = "/common/error{error_code}")
	public ModelAndView error(HttpServletRequest request, HttpSession session, Exception exception,
			@PathVariable String error_code) {

		ModelAndView mv = new ModelAndView("/common/error");

		String exceptionMsg = exception.getMessage();
		// 스택
		String statckTrace = "";

		StackTraceElement[] ele = exception.getStackTrace();
		for (int i = 0; i < ele.length; i++) {
			statckTrace += "\r\n" + ele[i];
		}

		String msg = "";

		Map<String, Object> map = new HashMap<String, Object>();
		map.put("STATUS_CODE", request.getAttribute("javax.servlet.error.status_code"));
		map.put("REQUEST_URI", request.getAttribute("javax.servlet.error.request_uri"));
		map.put("EXCEPTION_TYPE", request.getAttribute("javax.servlet.error.exception_type"));
		map.put("EXCEPTION", request.getAttribute("javax.servlet.error.exception"));
		map.put("SERVLET_NAME", request.getAttribute("javax.servlet.error.servlet_name"));
		map.put("ERROR_MESSAGE", request.getAttribute("javax.servlet.error.message"));
		map.put("STATCKTRACE", statckTrace);

		try {
			
			if("400".equals(error_code)) {
				msg = "잘못된 요청입니다.";
				
			}else if("403".equals(error_code)) {
				
				msg = "접근이 금지되었습니다.";
				
			}else if("404".equals(error_code)) {
				
				msg = "페이지를 찾을 수 없습니다.";
				
			}else if("405".equals(error_code)) {
				
				msg = "요청된 메소드가 허용되지 않습니다.";
				
			}else if("500".equals(error_code)) {
				
				msg = "서버에 오류가 발생하였습니다.";
				
			}else {
				
				msg = "알 수 없는 오류가 발생하였습니다.";
			}
			
		} catch (Exception e) {
			msg = "기타 오류가 발생하였습니다.";
			
		} finally {
			
			map.put("MESSAGE", msg);
		}

		// logging
		if (map.isEmpty() == false) {

			logger.info("= = = = = ERROR LOG START = = = = =");

			if (!SessionUtil.isNull(session, "ADMIN")) {
				logger.info("ERROR LOG admin_id : " + SessionUtil.getString(session, "ADMIN", "admin_id"));
				logger.info("ERROR LOG admin_name : " + SessionUtil.getString(session, "ADMIN", "admin_name"));
			} else {
				logger.info("session is null");
			}
			
			
			for (String key : map.keySet()) {
				// Object value = map.get(key);
				logger.info("key : " + key + "," + "value : " + map.get(key));
			}
			
			logger.info("= = = = = ERROR LOG END = = = = =");
			
		}

		mv.addObject("error", map);
		return mv;
	}
	
	
	
	  @ResponseBody  
	  @RequestMapping("/ajax/error") public void ajaxError(HttpSession session, 
			  @RequestBody HashMap<String, Object> paramMap ) throws Exception{
		  logger.info("= = = = = AJAX ERROR LOG START = = = = =");
		  logger.info("ajaxError admin_id : " + SessionUtil.getString(session, "ADMIN", "admin_id") );
		  logger.info("ajaxError admin_name : " + SessionUtil.getString(session, "ADMIN", "admin_name") );
		  logger.info("ajaxError param : " + paramMap.toString());
		  logger.info("= = = = = AJAX ERROR LOG END = = = = =");
	  }
	 
	
}
